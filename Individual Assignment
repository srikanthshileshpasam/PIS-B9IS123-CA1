import random
import string
import pandas


num_lst = []
name_lst = []
course_lst = []
raw_data = []

exit = False
count = 0



class ManualData:
    '''
    Class for accepting student data as input manually from the user.
    '''
    
    def __init__(self):
        pass
    
    def entry(self):
        '''
        Takes in student name, student number, student course and saves it to name_lst (str), num_lst (int), 
        course_lst (str) respectively.
        
        It returns raw_data which is a list of lists of each student detail.
        '''
        x = input('Enter student name:\n')
        name_lst.append(x)
        
        x = int(input('Enter student number:\n'))
        while x > 99999999: 
            x = int(input('Re enter student number(Should be less than 8 digits):\n'))
        num_lst.append(x)
        
        x = input('Enter course code:\n')
        while len(x) > 7: 
            x = input('Re enter course code (Should be less than 7 characters):\n')
        course_lst.append(x)
        
        raw_data.append([num_lst[count], name_lst[count], course_lst[count]])
        
        return raw_data



class RandomData:
    '''
    Class for generating random student data.
    
    Attr:
        max_students (int): Total number of student entries to be generated.   
    '''
    
    def __init__(self, max_students):
        self.max_students = max_students
        
    def generator(self):
        '''
        Generates entries of random student details.
        
        It returns raw_data which is a list of lists of each student detail.

        '''
        name_dir = ('Nami', 'Yuumi', 'Pyke', 'Soraka', 'Sona')
        course_dir_1 = ('EE', 'IT', 'CS', 'ME', 'CV')
        course_dir_2 = string.digits
        
        for i in range(0,self.max_students):
            num_lst.append(random.randint(1,99999999))
            name_lst.append(random.choice(name_dir))
            course_lst.append(random.choice(course_dir_1) + random.choice(course_dir_2)*5)
            raw_data.append([num_lst[i], name_lst[i], course_lst[i]])
                    
        return raw_data
    

    
def manual_sort(data):
    '''
    Quick Sort function.

    Attr:
        data [List]: List to be sorted.
    
    Returns sorted list.
    '''
    greater = []
    lesser = []
    equal = []

    if len(data) > 1:
        pivot = data[0]
        
        for x in data:
            if x < pivot:
                lesser.append(x)
            elif x == pivot:
                equal.append(x)
            elif x > pivot:
                greater.append(x)
        return manual_sort(lesser) + equal + manual_sort(greater)
    else:
        return data

    

class CreateTable:
    '''
    Creates dataframe of a list.
    Attr:
        data [List]: List to create a dataframe from.
    '''
    
    def __init__(self, data):
        self.data = data
        
                
    def tabulate(self):
        '''
        Creates dataframe of a list.
        
        Returns dataframe type
        '''
        
        data_frame = pandas.DataFrame(self.data, columns = ['Number', 'Name', 'Course'])
        #data_frame.sort_values(by=['Number'], inplace = True)
        return data_frame
    
    
    def retrieve(self, sorted_lst):
        '''
        Shows the smallest entry and reomves it from the dataframe.
        Attr:
            sorted_lst [Dataframe]: Dataframe input
        
        Returns a dictionary with keys:
        'low': value with the smallest number
        'lst': new dataframe without the smallest entry
        '''
        self.sorted_lst = sorted_lst
        
        min_student = sorted_lst.iloc[0]
        sorted_lst = sorted_lst.iloc[1:]
        
        return {'low':min_student, 'lst':sorted_lst}


    
def process():
    '''
    A set of print functions to display the processed data.
    
    Called after taking all user inputs.
    
    print 1 - The raw student list either manually taken using ManualData.entry() or automatically generated from RandomData.generator()
    print 2 - Sorted student list from manual_sort() sent to CreateTable.tabulate() and printed in the form of a dataframe.
    print 3 - Student with the smallest student number and new list without that student from CreateTable.retrieve().
    '''
    
    print(f'\n\nThe student data input/generated is as below:\n{raw_student_list}')
        
    sorted_student_list = manual_sort(raw_student_list)
    
    #student_data_table = CreateTable(raw_student_list)
    student_data_table = CreateTable(sorted_student_list)
    
    sorted_student_list = student_data_table.tabulate()
    print(f'\n\nThe sorted student list of students is shown below:\n{sorted_student_list}')

    minimum_student = student_data_table.retrieve(sorted_student_list)
    print(f"\n\nThe student with the lowest student number is:\n{minimum_student.get('low')}\n\nThe new student list is:\n{minimum_student.get('lst')}")



while exit == False:
    choice = input('\n\n\nWhat would you like to do?(Select the corresponding number)\n1) Enter Student details manually.\n2) Process manual data.\n3) Generate random data.\nPress any other key to exit.\n\n')

    if choice == '1':
        student_data = ManualData()
        raw_student_list = student_data.entry()
        count += 1
        

    elif choice == '2':
        process()
        exit = True
        
        
    elif choice == '3':
        student_count = int(input('Enter the number of random student entries to be created:\n'))
        
        student_data = RandomData(student_count)
        raw_student_list = student_data.generator()
        
        process()
        exit = True
    
    
    else:
        print('Exiting..')
        exit = True
